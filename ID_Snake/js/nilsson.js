// Generated by CoffeeScript 2.4.1
var assert, bg, bsort, button, circle, compare, createAndAppend, div, fc, fixColor, getParameters, input, merp, nilsson_version, print, range, rd, sc, sw;

nilsson_version = "1.5"; // getParameters with 0 parameters fixed 

createAndAppend = (parent, type, attributes = {}) => {
  var attribute, elem, key;
  elem = document.createElement(type);
  parent.appendChild(elem);
  for (key in attributes) {
    attribute = attributes[key];
    elem[key] = attribute;
  }
  return elem;
};

button = (prompt, click) => {
  return createAndAppend(document.body, 'button', {
    innerText: prompt,
    onclick: click
  });
};

input = (keyup) => {
  return createAndAppend(document.body, 'input', {
    onkeyup: keyup
  });
};

div = () => {
  return createAndAppend(document.body, 'div');
};

// chai visar listinnehåll på ett bra sätt. 
// _.isEqual(a,b) fungerar också men det blir sämre listutskrifter
assert = function(a, b, msg = 'Assert failure') {
  return chai.assert.deepEqual(a, b, msg);
};

fixColor = function(args) {
  var a, b, g, n, r;
  n = args.length;
  a = 1;
  if (n === 1) {
    [r, g, b] = [args[0], args[0], args[0]];
  }
  if (n === 2) {
    [r, g, b, a] = [args[0], args[0], args[0], args[1]];
  }
  if (n === 3) {
    [r, g, b] = args;
  }
  if (n === 4) {
    [r, g, b, a] = args;
  }
  return color(255 * r, 255 * g, 255 * b, 255 * a);
};

fc = function() {
  if (arguments.length === 0) {
    return noFill();
  } else {
    return fill(fixColor(arguments));
  }
};

sc = function() {
  if (arguments.length === 0) {
    return noStroke();
  } else {
    return stroke(fixColor(arguments));
  }
};

bg = function() {
  return background(fixColor(arguments));
};

sw = function(n) {
  return strokeWeight(n);
};

circle = function(x, y, r) {
  return ellipse(x, y, 2 * r, 2 * r);
};

rd = function(degrees) {
  return rotate(radians(degrees));
};

print = console.log;

range = _.range; // from underscore.coffee

merp = function(y1, y2, i, x1 = 0, x2 = 1) {
  return map(i, x1, x2, y1, y2);
};

getParameters = function(h = window.location.href) {
  var arr, f, s;
  h = decodeURI(h);
  arr = h.split('?');
  if (arr.length !== 2) {
    return {};
  }
  s = arr[1];
  if (s === '') {
    return {};
  }
  return _.object((function() {
    var k, len, ref, results;
    ref = s.split('&');
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      f = ref[k];
      results.push(f.split('='));
    }
    return results;
  })());
};

assert(getParameters('http:\\christernilsson.github.io\Shortcut\www'), {});

assert(getParameters('http:\\christernilsson.github.io\Shortcut\www?'), {});

assert(getParameters('http:\\christernilsson.github.io\Shortcut\www?a=0&b=1'), {
  'a': '0',
  'b': '1'
});

compare = function(a, b) {
  var c, i, k, len, ref;
  if (typeof a === "object" && typeof b === "object") {
    ref = range(Math.min(a.length, b.length));
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      c = compare(a[i], b[i]);
      if (c !== 0) {
        return c;
      }
    }
  } else {
    return (a > b ? -1 : (a < b ? 1 : 0));
  }
  return 0;
};

assert(compare(12, 13), 1);

assert(compare(12, 12), 0);

assert(compare(13, 12), -1);

assert(compare([1, 11], [1, 2]), -1);

assert(compare([1, 11], [1, 11]), 0);

assert(compare([1, 2], [1, 11]), 1);

assert(compare([1, '11'], [1, '2']), 1);

assert(compare([1, '11'], [1, '11']), 0);

assert(compare([1, '2'], [1, '11']), -1);

bsort = function(list, cmp = compare) {
  var i, j, k, l, len, len1, ref, ref1;
  ref = range(list.length);
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    ref1 = range(list.length - 1);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      j = ref1[l];
      if (cmp(list[j], list[j + 1]) < 0) {
        [list[j], list[j + 1]] = [list[j + 1], list[j]];
      }
    }
  }
  return list;
};

assert(bsort([1, 8, 2], compare), [1, 2, 8]);

assert(bsort([1, 8, 2], compare), [1, 2, 8]);

assert(bsort([[1], [8], [2]], compare), [[1], [2], [8]]);

assert(bsort([[2, 1], [2, 8], [2, 2]], compare), [[2, 1], [2, 2], [2, 8]]);

assert(bsort([[1, 8], [1, 7], [1, 9]], compare), [[1, 7], [1, 8], [1, 9]]);

assert(bsort([3, 2, 4, 1], compare), [1, 2, 3, 4]);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\p5Dojo2\ID_Snake\coffee\nilsson.coffee