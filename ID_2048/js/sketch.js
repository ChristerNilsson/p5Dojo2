// Generated by CoffeeScript 2.4.1
var Button, N, S, Twenty48, app, draw, keyPressed, setup;

N = 4;

S = 150;

Button = class Button {
  constructor(number, i1, j1) {
    this.number = number;
    this.i = i1;
    this.j = j1;
    this.x = this.i * S;
    this.y = this.j * S;
    this.xoff = (width - N * S) / 2;
    this.yoff = (height - N * S) / 2;
  }

  draw() {
    fc(0.75);
    sc(0);
    rect(this.xoff + this.x, this.yoff + this.y, S, S);
    fill('#000 #00f #0f0 #0ff #f00 #f0f #ff0 #fff'.split(' ')[this.number % 8]);
    textSize([0, 3 * 40, 3 * 40, 3 * 30, 3 * 20, 3 * 15][str(2 ** this.number).length]);
    if (this.number !== 0) {
      return text(2 ** this.number, S / 2 + this.x + this.xoff, S / 2 + this.y + this.yoff);
    }
  }

};

app = null;

Twenty48 = class Twenty48 {
  constructor() {
    var button, i, j, k, l, len, len1, ref, ref1;
    N = 4;
    this.state = '';
    this.buttons = [];
    ref = range(N);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      ref1 = range(N);
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        j = ref1[l];
        button = new Button(0, i, j);
        this.buttons.push(button);
      }
    }
    this.new_piece();
    this.new_piece();
  }

  new_piece() {
    var cands, i, moves;
    moves = range(N * N);
    cands = (function() {
      var k, len, results;
      results = [];
      for (k = 0, len = moves.length; k < len; k++) {
        i = moves[k];
        if (this.buttons[i].number === 0) {
          results.push(i);
        }
      }
      return results;
    }).call(this);
    i = _.sample(cands);
    return this.buttons[i].number = _.sample([1, 2]);
  }

  shift(numbers, index, delta) {
    var i, item, k, l, len, len1, lst, ref, ref1;
    lst = (function() {
      var k, len, ref, results;
      ref = range(N);
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        i = ref[k];
        results.push(numbers[index + i * delta]);
      }
      return results;
    })();
    lst = (function() {
      var k, len, results;
      results = [];
      for (k = 0, len = lst.length; k < len; k++) {
        item = lst[k];
        if (item !== 0) {
          results.push(item);
        }
      }
      return results;
    })();
    ref = range(lst.length);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      if (lst[i] === lst[i + 1] && lst[i] !== 0) {
        lst[i]++;
        lst[i + 1] = 0;
      }
    }
    while (lst.length < N) {
      lst.push(0);
    }
    ref1 = range(N);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      i = ref1[l];
      numbers[index + i * delta] = lst[i];
    }
    return numbers;
  }

  move(start, a, b) {
    var button, i, k, l, last, len, len1, numbers, ref, ref1;
    numbers = (function() {
      var k, len, ref, results;
      ref = this.buttons;
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        button = ref[k];
        results.push(button.number);
      }
      return results;
    }).call(this);
    last = numbers.slice();
    ref = range(N);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      numbers = this.shift(numbers, start + i * a, b);
    }
    ref1 = this.buttons;
    for (i = l = 0, len1 = ref1.length; l < len1; i = ++l) {
      button = ref1[i];
      button.number = numbers[i];
    }
    if (!_.isEqual(numbers, last)) {
      this.new_piece();
    }
    return numbers;
  }

  up() {
    return this.move(0, 4, 1);
  }

  down() {
    return this.move(3, 4, -1);
  }

  left() {
    return this.move(0, 1, 4);
  }

  right() {
    return this.move(12, 1, -4);
  }

  check_lose(b) {
    var button, numbers;
    numbers = (function() {
      var k, len, ref, results;
      ref = this.buttons;
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        button = ref[k];
        if (button.number === 0) {
          results.push(button.number);
        }
      }
      return results;
    }).call(this);
    if (numbers.length === 0) {
      return this.state = 'LOSE';
    }
  }

  draw() {
    var button, k, len, ref;
    bg(0.5);
    textAlign(CENTER, CENTER);
    ref = this.buttons;
    for (k = 0, len = ref.length; k < len; k++) {
      button = ref[k];
      button.draw();
    }
    this.check_lose();
    if (this.state !== '') {
      fc(1, 0, 0, 0.5);
      textSize(64);
      return text(this.state, width / 2, height / 2);
    }
  }

};

setup = function() {
  createCanvas(windowWidth, windowHeight);
  return app = new Twenty48;
};

draw = function() {
  return app.draw();
};

keyPressed = function() {
  if (key === 'ArrowUp') {
    app.up();
  }
  if (key === 'ArrowDown') {
    app.down();
  }
  if (key === 'ArrowLeft') {
    app.left();
  }
  if (key === 'ArrowRight') {
    return app.right();
  }
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\p5Dojo2\ID_2048\coffee\sketch.coffee