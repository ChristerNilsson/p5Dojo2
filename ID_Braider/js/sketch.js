// Generated by CoffeeScript 2.4.1
var Braider, Cartesius, braider, draw, setup;

braider = null;

Cartesius = class Cartesius {
  constructor(x, y, c1) {
    this.x = x;
    this.y = y;
    this.c = c1;
  }

  go(dx, dy) {
    stroke(this.c);
    line(this.x, this.y, this.x + dx, this.y + dy);
    return [this.x, this.y] = [this.x + dx, this.y + dy];
  }

  down(d) {
    return this.go(0, d);
  }

  left(d) {
    return this.go(-d, 0);
  }

};

Braider = class Braider {
  braid(type) {
    this.type = type;
    this.n = 0;
    return this.forward();
  }

  draw() {
    var a, b, c, d, i, j, k, l, len, len1, len2, len3, m, ref, ref1, ref2, ref3, results;
    if (this.type === 1) {
      sw(4 * 5);
      a = new Cartesius(4 * 200, 4 * 20, '#f00');
      ref = range(this.n);
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        a.go(-4 * 20, 4 * 20);
      }
    }
    if (this.type === 2) {
      sw(4 * 5);
      a = new Cartesius(4 * 200, 4 * 20, '#f00');
      b = new Cartesius(4 * 190, 4 * 10, '#0f0');
      ref1 = range(this.n);
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        i = ref1[k];
        if (i % 4 === 0) {
          b.down(4 * 20);
        }
        if (i % 4 === 1) {
          a.left(4 * 20);
        }
        if (i % 4 === 2) {
          a.down(4 * 20);
        }
        if (i % 4 === 3) {
          b.left(4 * 20);
        }
      }
    }
    if (this.type === 3) {
      sw(4 * 5);
      a = new Cartesius(4 * 200, 4 * 30, '#f00');
      b = new Cartesius(4 * 190, 4 * 10, '#0f0');
      c = new Cartesius(4 * 180, 4 * 20, '#00f');
      ref2 = range(this.n);
      for (l = 0, len2 = ref2.length; l < len2; l++) {
        i = ref2[l];
        if (i % 6 === 0) {
          b.down(4 * 30);
        }
        if (i % 6 === 1) {
          a.left(4 * 30);
        }
        if (i % 6 === 2) {
          c.down(4 * 30);
        }
        if (i % 6 === 3) {
          b.left(4 * 30);
        }
        if (i % 6 === 4) {
          a.down(4 * 30);
        }
        if (i % 6 === 5) {
          c.left(4 * 30);
        }
      }
    }
    if (this.type === 4) {
      sw(4 * 10);
      a = new Cartesius(4 * 150, 4 * 40, '#f00');
      b = new Cartesius(4 * 170, 4 * 20, '#0f0');
      c = new Cartesius(4 * 160, 4 * 30, '#00f');
      d = new Cartesius(4 * 190, 4 * 50, '#ff0');
      ref3 = range(this.n);
      results = [];
      for (m = 0, len3 = ref3.length; m < len3; m++) {
        i = ref3[m];
        if (i % 12 === 0) {
          b.down(4 * 50);
        }
        if (i % 12 === 1) {
          c.left(4 * 30);
          c.down(4 * 30);
        }
        if (i % 12 === 2) {
          d.left(4 * 50);
        }
        if (i % 12 === 3) {
          a.down(4 * 50);
        }
        if (i % 12 === 4) {
          b.left(4 * 50);
        }
        if (i % 12 === 5) {
          c.down(4 * 50);
        }
        if (i % 12 === 6) {
          d.left(4 * 30);
          d.down(4 * 30);
        }
        if (i % 12 === 7) {
          a.left(4 * 50);
        }
        if (i % 12 === 8) {
          b.left(4 * 30);
          b.down(4 * 30);
        }
        if (i % 12 === 9) {
          d.down(4 * 50);
        }
        if (i % 12 === 10) {
          c.left(4 * 50);
        }
        if (i % 12 === 11) {
          a.left(4 * 30);
          results.push(a.down(4 * 30));
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  }

  forward() {
    return this.n++;
  }

  back() {
    return this.n--;
  }

};

draw = function() {
  bg(0.5);
  return braider.draw();
};

setup = function() {
  createCanvas(4 * 200, 4 * 200);
  braider = new Braider;
  button('braid 1', () => {
    return braider.braid(1);
  });
  button('braid 2', () => {
    return braider.braid(2);
  });
  button('braid 3', () => {
    return braider.braid(3);
  });
  button('braid 4', () => {
    return braider.braid(4);
  });
  button('back', () => {
    return braider.back();
  });
  button('forward', () => {
    return braider.forward();
  });
  return braider.braid(1);
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\p5Dojo2\ID_Braider\coffee\sketch.coffee