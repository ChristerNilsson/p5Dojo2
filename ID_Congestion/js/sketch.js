// Generated by CoffeeScript 2.4.1
  //           1            2               3         4           5               6               7           8                  9                10               11           12           13               14             15                16              17               18            19          20             21          22               23             24            25                26               27             28               29               30             31              32             33               34               35              36               37                38              39               40
var Car, Congestion, PROBLEMS, S, current, draw, mousePressed, problems, setup,
  indexOf = [].indexOf,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

PROBLEMS = 'Ad0sBwCoD569 AcsuxB3iC09gqDb AdjwCpDfn AdBlwCktD03 Ad0syBjC5hoD36a Ad06iBxC3koDabf Ad2kC1459hr Ac38imouBrxCaefqD5 Ac24aBjC19hqtDgi Ad046suyBjC2rDbc Ad1BlwCktD03 Ac1BluC0sD58 Af02lsvyC48drDbi Ae0aksuC2cdghq Ae1368svxCklDabcd Af028uBlC46dD5e Ac8aiB1ouC0estDl Ad06pBjuC2D3c Ae3kBpC2adm Ac7rB3xC09eqDh Ad0BjxC2D36 AdamqB3vC26jotD9 Af9msB2wC8klD5 Ae3juBoC27cgs Ad046syBjC2gprDbc AdxB3jC169hiqtDa Ac17lBxC0eqD3h AcaluwB0qC3ijD8n AcjlpB0uC8hirtD4 AdikuwB3C29D0n Ad0aloB3xC9cDhk Ac04jluC3irD2n Ac4jlpBuC1irsD2n AcsuxB3iC09glqDb Ac3puBjC9irsD25 Ae48suB1iC7lqD0b Ad046suyBjC2rDabc Ac7lrB3xC09eqDh AcilqwB3C29eopDh Af1suxBiC478lqD0b'.split(' ');

S = 60;

problems = [];

current = 0;

Car = class Car {
  constructor(ch, wh, c) {
    var index;
    this.c = c;
    index = "0123456789abcdefghijklmnopqrstuvwxyz".indexOf(ch);
    this.i = index % 6;
    this.j = int(index / 6);
    [this.w, this.h] = wh;
  }

  render() {
    fill(this.c);
    return rect(S + S * this.i + 3, S + S * this.j + 3, S * this.w - 6, S * this.h - 6);
  }

  inside(mx, my) {
    var ref, ref1;
    return (0 < (ref = mx - S - S * this.i - 3) && ref < S * this.w - 6) && (0 < (ref1 = my - S - S * this.j - 3) && ref1 < S * this.h - 6);
  }

  ins(i, j) {
    return (this.i <= i && i < this.i + this.w) && (this.j <= j && j < this.j + this.h);
  }

  direction(mx, my) {
    var x0, x1, y0, y1;
    if (this.h === 1) {
      x0 = S + S * this.i + 3;
      x1 = S + S * this.i + 3 + S * this.w - 6;
      if (2 * mx < x0 + x1) {
        return -1;
      } else {
        return 1;
      }
    }
    if (this.w === 1) {
      y0 = S + S * this.j + 3;
      y1 = S + S * this.j + 3 + S * this.h - 6;
      if (2 * my < y0 + y1) {
        return -1;
      } else {
        return 1;
      }
    }
  }

  move(d, cars) {
    var car, counter, di, dj, k, len;
    di = 0;
    dj = 0;
    if (this.c === '#f00') { // Red Car
      if (0 <= this.i + d) {
        di = d;
      }
    } else {
      if (this.w === 1 && 0 <= this.j + d && this.j + d + this.h <= 6) {
        dj = d;
      }
      if (this.h === 1 && 0 <= this.i + d && this.i + d + this.w <= 6) {
        di = d;
      }
    }
    counter = 0;
    for (k = 0, len = cars.length; k < len; k++) {
      car = cars[k];
      if (d === -1) {
        if (car.ins(this.i + di, this.j + dj)) {
          counter += 1;
        }
      }
      if (d === 1) {
        if (car.ins(this.i + this.w - 1 + di, this.j + this.h - 1 + dj)) {
          counter += 1;
        }
      }
    }
    if (counter === 0) {
      this.i += di;
      this.j += dj;
    }
    return counter === 0;
  }

};

Congestion = class Congestion {
  constructor(s) {
    this.selected = 0;
    this.loadProblem(s);
  }

  done() {
    return this.selected === 0 && this.cars[this.selected].i === 6;
  }

  draw() {
    var car, k, len, ref;
    bg(0);
    sc();
    fc(0.5);
    rect(S, S, 6 * S + 1, 6 * S + 1);
    rect(7 * S, 3 * S, S, S);
    ref = this.cars;
    for (k = 0, len = ref.length; k < len; k++) {
      car = ref[k];
      car.render();
    }
    fc(1);
    text(`#${1 + current}`, width / 2, S / 2);
    return text(`${this.moves.length}`, width / 2, height - S / 2);
  }

  loadProblem(s) {
    var ch, i, k, len, results, wh;
    this.cars = [];
    this.moves = [];
    this.index = 0;
    results = [];
    for (i = k = 0, len = s.length; k < len; i = ++k) {
      ch = s[i];
      if (indexOf.call("ABCD", ch) >= 0) {
        results.push(wh = {
          A: [2, 1],
          B: [3, 1],
          C: [1, 2],
          D: [1, 3]
        }[ch]);
      } else {
        results.push(this.cars.push(new Car(ch, wh, i === 1 ? '#f00' : '#fff')));
      }
    }
    return results;
  }

  mousePressed(mx, my) {
    var car, e, i, k, len, ref, results;
    if (this.done()) {
      return;
    }
    ref = this.cars;
    results = [];
    for (i = k = 0, len = ref.length; k < len; i = ++k) {
      car = ref[i];
      if (car.inside(mx, my)) {
        e = car.direction(mx, my);
        if (car.move(e, this.cars)) {
          this.moves.push([i, e]);
          break;
        } else {
          results.push(void 0);
        }
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

  undo() {
    var e;
    if (this.moves.length === 0) {
      return;
    }
    [this.selected, e] = this.moves.pop();
    return this.cars[this.selected].move(-e, this.cars);
  }

  reset() {
    var e, results;
    results = [];
    while (this.moves.length > 0) {
      [this.selected, e] = this.moves.pop();
      results.push(this.cars[this.selected].move(-e, this.cars));
    }
    return results;
  }

};

setup = function() {
  var k, len, p;
  createCanvas(8 * S, 8 * S);
  textAlign(CENTER, CENTER);
  textSize(32);
  for (k = 0, len = PROBLEMS.length; k < len; k++) {
    p = PROBLEMS[k];
    problems.push(new Congestion(p));
  }
  current = 0;
  current = modulo(current, PROBLEMS.length);
  button('prev', () => {
    return current = modulo(current - 1, problems.length);
  });
  button('next', () => {
    return current = modulo(current + 1, problems.length);
  });
  button('undo', () => {
    return problems[current].undo();
  });
  return button('reset', () => {
    return problems[current].reset();
  });
};

draw = function() {
  return problems[current].draw();
};

mousePressed = function(event) {
  return problems[current].mousePressed(event.x, event.y);
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\p5Dojo2\ID_Congestion\coffee\sketch.coffee